# -*- coding: utf-8; mode: ruby -*-
#
# Copyright (C) 2012-2014  Kouhei Sutou <kou@clear-code.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "optparse"
require "ostruct"

require "gqtp"

options = OpenStruct.new
options.listen_host = "0.0.0.0"
options.listen_port = 10043
options.upstream_host = nil
options.upstream_port = 10043
options.backend = :thread

parser = OptionParser.new
parser.on("--listen-host=HOST",
          "IP host or host name to listen",
          "(#{options.listen_host})") do |host|
  options.listen_host = host
end
parser.on("--listen-port=PORT", Integer,
          "Port number to listen",
          "(#{options.listen_port})") do |port|
  options.listen_port = port
end
parser.on("--upstream-host=HOST",
          "IP host or host name of upstream",
          "(#{options.upstream_host})") do |host|
  options.upstream_host = host
end
parser.on("--upstream-port=PORT", Integer,
          "Port number of upstream",
          "(#{options.upstream_port})") do |port|
  options.upstream_port = port
end
available_backends = [:thread, :synchronous, :coolio, :eventmachine]
available_backends_label = available_backends.join(", ")
parser.on("--backend=BACKEND", available_backends,
          "Use BACKEND for connection",
          "[#{available_backends_label}]",
          "(#{options.backend})") do |backend|
  options.backend = backend
end

begin
  parser.parse!
rescue OptionParser::ParseError
  puts($!.message)
  exit(false)
end

if options.upstream_host.nil?
  puts("--upstream-host is required.")
  exit(false)
end

proxy = GQTP::Proxy.new(:listen_host => options.listen_host,
                        :listen_port => options.listen_port,
                        :upstream_host => options.upstream_host,
                        :upstream_port => options.upstream_port,
                        :backend => options.backend)
if options.backend == :eventmachine
  require "eventmachine"
  EventMachine.run do
    proxy.run
  end
else
  proxy.run.wait
end
